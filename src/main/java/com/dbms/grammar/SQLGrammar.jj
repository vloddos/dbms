options
{
    IGNORE_CASE = true;
    STATIC = false;
}

PARSER_BEGIN (SqlParser)
    package com.dbms.grammar;

    import com.dbms.structs.TypeDescription;

    import java.util.ArrayList;
    import java.util.LinkedHashMap;
    import java.util.Map;

    public class SqlParser {
        void run() throws Exception {
            while (true) {
                parse();
            }
        }
    }
PARSER_END (SqlParser)

//____________________________________________Here all tokens descriptions____________________________________________

SKIP:
{
    "\n"
    | "\r"
    | "\r\n"
    | "\\"
    | "\t"
    | " "
}

//KEYWORDS
TOKEN:
{
    <CREATE: "CREATE">
    | <DATABASE: "DATABASE">
    | <DELETE: "DELETE">
    | <DROP: "DROP">
    | <EXIT: "EXIT">
    | <FROM: "FROM">
    | <INSERT: "INSERT">
    | <INTO: "INTO">
    | <LIMIT: "LIMIT">
    | <OFFSET: "OFFSET">
    | <SELECT: "SELECT">
    | <SET: "SET">
    | <SHOW: "SHOW">
    | <TABLE: "TABLE">
    | <UPDATE: "UPDATE">
    | <USE: "USE">
    | <VALUES: "VALUES">
    | <WHERE: "WHERE">
}

//PREDICATS AND CONDITIONS
TOKEN:
{
    //<PREDICAT: "AND" | "OR">
     //<INVERSE: "NOT">
     <COMPARE: "<" | ">" | "=" | "<>" | "<=" | ">=">
}

TOKEN:
{
    <STRING_LITERAL: (["a" - "z", "_", "0"-"9", "-", "@", "."])+>
    | <MATH_OPERATION_LITEARAL: "*" | "/" | "+" | "-" >
    | <STAR: "*">
}

//SEPARATORS AND OPERATORS
TOKEN:
{
    <SEMICOLON: ";">
    | <SINGLE_MARK: "'">
    | <OPEN_BRACKET: "(">
    | <CLOSE_BRACKET: ")">
    | <COMMA: ",">
}

//____________________________________________Here main methods____________________________________________

ArgsGuard parse() throws Exception:
{ArgsGuard args = null;}
{
    (
        args = parseCreateDatabase()
        {return args;}
    )
    |
    (
        args = parseUseDatabase()
        {return args;}
    )
    |
    (
        args = parseCreateTable()
        {return args;}
    )
    |
    (
        args = parseShowCreateTable()
        {return args;}
    )
    |
    (
        args = parseInsertIntoTable()
        {return args;}
    )
    |
    (
        args = parseSelectFromTable()
        {return args;}
    )
    |
    (
        args = parseUpdate()
        {return args;}
    )
    |
    (
        args = parseDelete()
        {return args;}
    )
    |
    (
        args = parseExit()
        {return args;}
    )

    {return args;}
}

ArgsGuard parseCreateDatabase() throws Exception:
{
    Token name;
    ArgsGuard args = new ArgsGuard();
}
{
    <CREATE> args.command = <DATABASE>
    name = <STRING_LITERAL>
    <SEMICOLON>
    {
        args.setName(name.image);

        if (args != null)
            return args;
        }
    [args = parse()]
    {return args;}
}

ArgsGuard parseUseDatabase() throws Exception:
{
    Token name;
    ArgsGuard args = new ArgsGuard();
}
{
    args.command = <USE><DATABASE>
    name = <STRING_LITERAL>
    <SEMICOLON>
    {
        args.setName(name.image);
        if (args != null)
            return args;
    }
    [args = parse()]
    {return args;}
}

ArgsGuard parseCreateTable() throws Exception:
{
    Token name;
    ArgsGuard args = new ArgsGuard();
}
{
    <CREATE> args.command = <TABLE>
    name = <STRING_LITERAL>
    <OPEN_BRACKET>
    {
        args.setFields(getFields());
    }
    <CLOSE_BRACKET>
    <SEMICOLON>
    {
        args.setName(name.image);

        if (args != null)
            return args;
    }
    [args = parse()]
    {return args;}
}

ArgsGuard parseShowCreateTable() throws Exception:
{
    Token name;
    ArgsGuard args = new ArgsGuard();
}
{
    args.command = <SHOW><CREATE><TABLE>
    name = <STRING_LITERAL>
    <SEMICOLON>
    {
        args.setName(name.image);

        if (args != null)
            return args;
    }
    [args = parse()]
    {return args;}
}

ArgsGuard parseInsertIntoTable() throws Exception:
{
    Token name;

    ArrayList<String> insertableColumns = new ArrayList<String>();
    ArrayList<String> insertableValues = new ArrayList<String>();

    ArgsGuard args = new ArgsGuard();
}
{
    args.command = <INSERT>[<INTO>]
    name = <STRING_LITERAL>
    <OPEN_BRACKET>
    insertableColumns = getColumns()
    <CLOSE_BRACKET>
    <VALUES>
    <OPEN_BRACKET>
    insertableValues = getInsertableValues()
    <CLOSE_BRACKET>
    <SEMICOLON>
    {
        args.setName(name.image);
        args.setInsertableColumns(insertableColumns);
        args.setInsertableValues(insertableValues);

        if (args != null)
            return args;
    }
    [args = parse()]
    {return args;}
}

ArgsGuard parseSelectFromTable() throws Exception:
{
    Token name, limit = null, offset = null, star = null;

    ArrayList<String> insertableColumns = new ArrayList<String>();

    ArgsGuard args = new ArgsGuard();
}
{
    args.command = <SELECT>
    insertableColumns = getColumns()
    [star = <STAR>]
    <FROM>
    name = <STRING_LITERAL>
    [<LIMIT> limit = <STRING_LITERAL>]
    [<OFFSET> offset = <STRING_LITERAL>]
    <SEMICOLON>
    {
        args.setName(name.image);
        args.setInsertableColumns(insertableColumns);

        if (limit != null)
            args.setLimit(Integer.parseInt(limit.image));

        if (offset != null)
            args.setOffset(Integer.parseInt(offset.image));

        if (args != null)
            return args;
    }
    [args = parse()]
    {return args;}
}

ArgsGuard parseUpdate() throws Exception:
{
    Token name, math, sign, updatableColumn, updatableValue,
        compareColumn = null, compareSign = null, compareValue = null, comparePredicat = null;

    ArrayList<String> updatableColumns = new ArrayList<String>();
    ArrayList<String> updatableValues = new ArrayList<String>();

    ArrayList<String> compareColumns = new ArrayList<String>();
    ArrayList<String> compareSigns = new ArrayList<String>();
    ArrayList<String> compareValues = new ArrayList<String>();
    ArrayList<String> comparePredicats = new ArrayList<String>();

    ArgsGuard args = new ArgsGuard();
}
{
    args.command = <UPDATE>
    name = <STRING_LITERAL>
    <SET>
    updatableColumn = <STRING_LITERAL>
    //FIXME: here need only "="
    <COMPARE>
    updatableValue = <STRING_LITERAL>
    [
        sign = <MATH_OPERATION_LITEARAL>
        {
            updatableValue.image += sign.image;
        }
    ]
    {
        updatableColumns.add(updatableColumn.image);
        math = updatableValue;
        //updatableValues.add(updatableValue.image);
    }
    (
            updatableValue = <STRING_LITERAL>
            [
                sign = <MATH_OPERATION_LITEARAL>
                {
                    updatableValue.image += sign.image;
                }
            ]
            {
                math.image += updatableValue.image;
                //updatableValues.add(updatableValue.image);
            }
    )*
    (
        <COMMA>
        updatableColumn = <STRING_LITERAL>
        //FIXME: here need only "="
        <COMPARE>
        updatableValue = <STRING_LITERAL>
        [
            sign = <MATH_OPERATION_LITEARAL>
            {
                updatableValue.image += sign.image;
            }
        ]
        {
            updatableValues.add(math.image);
            math.image = updatableValue.image;
            updatableColumns.add(updatableColumn.image);
            //updatableValues.add(updatableValue.image);
        }
        (
            updatableValue = <STRING_LITERAL>
            [
                sign = <MATH_OPERATION_LITEARAL>
                {
                    updatableValue.image += sign.image;
                }
            ]
            {
                math.image += updatableValue.image;
                //updatableValues.add(updatableValue.image);
            }
         )*
    )*
    {
        updatableValues.add(math.image);
    }
    [
        <WHERE>
        updatableValue = <STRING_LITERAL>
        [sign = <COMPARE>
        {updatableValue.image += sign.image; }]
        [sign = <MATH_OPERATION_LITEARAL>
        {updatableValue.image += sign.image; }]

        {math = updatableValue;}

        (
            updatableValue = <STRING_LITERAL>
            [sign = <COMPARE>
            {updatableValue.image += sign.image; }]
            [sign = <MATH_OPERATION_LITEARAL>
            { updatableValue.image += sign.image; }]

            {
                math.image += updatableValue.image;
                //updatableValues.add(updatableValue.image);
            }
        )*

        {compareValues.add(math.image);}
    ]
    <SEMICOLON>
    {
        args.setName(name.image);
        args.setUpdatableColumns(updatableColumns);
        args.setUpdatableValues(updatableValues);

        args.setCompareColumns(compareColumns);
        args.setCompareSigns(compareSigns);
        args.setCompareValues(compareValues);
        args.setComparePredicats(comparePredicats);
        if (args != null)
            return args;
    }
    [args = parse()]
    {return args;}
}

ArgsGuard parseDelete() throws Exception:
{
    Token name, math, sign,  updatableValue, compareColumn = null, compareSign = null, compareValue = null, comparePredicat = null, star = null;

    ArrayList<String> compareColumns = new ArrayList<String>();
    ArrayList<String> compareSigns = new ArrayList<String>();
    ArrayList<String> compareValues = new ArrayList<String>();
    ArrayList<String> comparePredicats = new ArrayList<String>();

    ArgsGuard args = new ArgsGuard();
}
{
    args.command = <DELETE> [star = <STAR>] <FROM>
    name = <STRING_LITERAL>
    [
        <WHERE>
        updatableValue = <STRING_LITERAL>
        {math = updatableValue;}
        [sign = <COMPARE>
        {updatableValue.image += sign.image; }]
        [sign = <MATH_OPERATION_LITEARAL>
        {updatableValue.image += sign.image; }]
        {math.image = updatableValue.image;}

        (
            updatableValue = <STRING_LITERAL>
            [sign = <COMPARE>
            {updatableValue.image += sign.image; }]
            [sign = <MATH_OPERATION_LITEARAL>
            { updatableValue.image += sign.image; }]

            {
                math.image += updatableValue.image;
                //updatableValues.add(updatableValue.image);
            }
        )*

        {compareValues.add(math.image);}
    ]
    <SEMICOLON>
    {
        args.setName(name.image);
        args.setCompareColumns(compareColumns);
        args.setCompareSigns(compareSigns);
        args.setCompareValues(compareValues);
        args.setComparePredicats(comparePredicats);

        if (args != null)
            return args;
    }
    [args = parse()]
    {return args;}
}

ArgsGuard parseExit():
{
    ArgsGuard args = new ArgsGuard();
}
{
    args.command = <EXIT>
    <SEMICOLON>
    {return args;}
}

//____________________________________________Here helper methods____________________________________________

ArrayList<String> getColumns():
{
    Token columnName;

    ArrayList<String> insertableColumns = new ArrayList<String>();
}
{
    columnName = <STRING_LITERAL>
    {insertableColumns.add(columnName.image);}

    (
        <COMMA> columnName = <STRING_LITERAL>
        {
            insertableColumns.add(columnName.image);
        }
    )*

    {return insertableColumns;}
}

ArrayList<String> getInsertableValues():
{
    Token value;

    ArrayList<String> values = new ArrayList<String>();
}
{
    <SINGLE_MARK> value = <STRING_LITERAL> <SINGLE_MARK>
    {values.add(value.image);}

    (
        <COMMA> <SINGLE_MARK> value = <STRING_LITERAL> <SINGLE_MARK>
        {
            values.add(value.image);
        }
    )*

    {return values;}
}

Map<String, TypeDescription> getFields():
{
    Token name, TypeName;
    TypeDescription typeDescription;

    Map<String, TypeDescription> fields = new LinkedHashMap<String, TypeDescription>();
}
{
    name = <STRING_LITERAL>
    {
        fields.put(name.image, getTypeDescription());
    }
    //[<COMMA> getFields()]//???????????????
    (
        <COMMA> TypeName = <STRING_LITERAL>
        typeDescription = getTypeDescription()

        {
            fields.put(TypeName.image, typeDescription);
        }
    )*
    {return fields;}
}

TypeDescription getTypeDescription():
{
    Token type, length = null;

    TypeDescription typeDescription;
}
{
    type = <STRING_LITERAL>
    [<OPEN_BRACKET> length = <STRING_LITERAL><CLOSE_BRACKET>]
    {
        typeDescription = new TypeDescription(type.image);

        if (length != null)
            typeDescription.setLength(length.image);

        return typeDescription;
    }
}