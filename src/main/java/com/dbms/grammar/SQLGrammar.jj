options
{
    IGNORE_CASE = true;
    STATIC = false;
    LOOKAHEAD = 2;
}

PARSER_BEGIN (SqlParser)
    package com.dbms.grammar;

    import java.util.ArrayList;
    import java.util.LinkedHashMap;
    import java.util.Map;

    import com.dbms.backend.*;

    public class SqlParser {
        void run() throws Exception {
            while (true) {
                try {
                    parse();
                } catch(Throwable e) {
                    e.printStackTrace();
                }
            }
        }
    }
PARSER_END (SqlParser)

SKIP:
{
    "\n"
    | "\r"
    | "\r\n"
    | "\\"
    | "\t"
    | " "
}

SPECIAL_TOKEN:
{
    <LINE_COMMENT: "--"(~["\r","\n"])*>
    | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

//KEYWORDS
TOKEN:
{
    <CREATE: "CREATE">
    | <DATABASE: "DATABASE">
    | <DELETE: "DELETE">
    | <DROP: "DROP">
    | <EXIT: "EXIT">
    | <FROM: "FROM">
    | <INSERT: "INSERT">
    | <INTO: "INTO">
    | <LIMIT: "LIMIT">
    | <OFFSET: "OFFSET">
    | <SELECT: "SELECT">
    | <SHOW: "SHOW">
    | <TABLE: "TABLE">
    | <UPDATE: "UPDATE">
    | <USE: "USE">
    | <VALUES: "VALUES">
    | <WHERE: "WHERE">
}

//LITERALS
TOKEN:
{
    <STRING_LITERAL: (["a" - "z", "_", "0"-"9", "-", "@", "."])+>
}

//SEPARATORS AND OPERATORS
TOKEN:
{
    <SEMICOLON: ";">
    | <SINGLE_MARK: "'">
    | <OPEN_BRACKET: "(">
    | <CLOSE_BRACKET: ")">
    | <COMMA: ",">
}

void parse() throws Exception:
{}
{
    parseShowCreateTable()
    |
    parseCreateTable()
    |
    parseExit()
    /*|
    parseDropDatabase()
    |
    parseDropTable()*/
    |
    parseCreateDatabase()
    |
    parseUseDatabase()
    |
    /*parseInsertIntoTable()
    |*/
    <EOF>
}

void parseUseDatabase() throws Exception:
{
    Token name, command;
}
{
    command = <USE><DATABASE>
    name = <STRING_LITERAL>
    <SEMICOLON>
    {
        DataBases.useDataBase(name.image);
    }
    [parse()]
}

void parseCreateDatabase() throws Exception:
{
    Token name, command;
}
{
    command = <CREATE><DATABASE>
    name = <STRING_LITERAL>
    <SEMICOLON>
    {
        DataBases.createDataBase(name.image);
    }
    [parse()]
}
/*
void parseDropDatabase():
{
    Token name, command;
}
{
    command = <DROP><DATABASE>
    name = <STRING_LITERAL>
    <SEMICOLON>
    [parse()]
}

void parseDropTable():
{
    Token name, command;
}
{
    command = <DROP><TABLE>
    name = <STRING_LITERAL>
    <SEMICOLON>
    [parse()]
}
*/

void parseShowCreateTable() throws Exception:
{
    Token name, command;
}
{
    command = <SHOW><CREATE><TABLE>
    name = <STRING_LITERAL>
    <SEMICOLON>
    {
        System.out.println(
            DataBases.getCurrentDataBase().showCreate(name.image)
        );
    }
    [parse()]
}

void parseCreateTable() throws Exception:
{
    Token name, command;
}
{
    command = <CREATE><TABLE>
    name = <STRING_LITERAL>
    /*{
        //header = new TableHeader();
        header.name = name.image;
    }*/

    <OPEN_BRACKET>
    {
        DataBases.getCurrentDataBase().createTable(
            new Table(
                new TableHeader(
                    name.image,
                    getFields()
                )
            )
        );
    }
    <CLOSE_BRACKET>
    <SEMICOLON>
    [parse()]
}

Token parseExit():
{
    Token command;
}
{
    command = <EXIT>
    <SEMICOLON>
    {
        DataBases.exit();
        return command;
    }
}

ArgsGuard parseSelectFromTable() throws Exception:
{
    Token name, command, limit = null, offset = null;

    ArrayList<String> columns = new ArrayList<String>();

    ArgsGuard args = new ArgsGuard();
}
{
    command = <SELECT>
    columns = getColumns()
    <FROM>
    name = <STRING_LITERAL>
    [<LIMIT> limit = <STRING_LITERAL>]
    [<OFFSET> offset = <STRING_LITERAL>]
    <SEMICOLON>
    {
        args.setName(name.image);
        args.setColumns(columns);

        if (limit != null)
            args.setLimit(Integer.parseInt(limit.image));

        if (offset != null)
            args.setOffset(Integer.parseInt(offset.image));

        return args;
    }
    //FIXME: this command need run
    //[parse()]
}

ArgsGuard parseInsertIntoTable() throws Exception:
{
    Token name, command;

    ArrayList<String> columns = new ArrayList<String>();
    ArrayList<String> insertableValues = new ArrayList<String>();

    ArgsGuard args = new ArgsGuard();
}
{
    command = <INSERT>[<INTO>]
    name = <STRING_LITERAL>
    <OPEN_BRACKET>
    columns = getColumns()
    <CLOSE_BRACKET>
    <VALUES>
    <OPEN_BRACKET>
    insertableValues = getInsertableValues()
    <CLOSE_BRACKET>
    <SEMICOLON>
    {
        args.setName(name.image);
        args.setColumns(columns);
        args.setInsertableValues(insertableValues);

        return args;
    }
    //FIXME: this command need run
    //[parse()]
}

ArrayList<String> getColumns():
{
    Token columnName;

    ArrayList<String> columns = new ArrayList<String>();
}
{
    columnName = <STRING_LITERAL>
    {columns.add(columnName.image);}

    (
        <COMMA> columnName = <STRING_LITERAL>
        {
            columns.add(columnName.image);
        }
    )*

    {return columns;}
}

ArrayList<String> getInsertableValues():
{
    Token value;

    ArrayList<String> values = new ArrayList<String>();
}
{
    <SINGLE_MARK> value = <STRING_LITERAL> <SINGLE_MARK>
    {values.add(value.image);}

    (
        <COMMA> <SINGLE_MARK> value = <STRING_LITERAL> <SINGLE_MARK>
        {
            values.add(value.image);
        }
    )*

    {return values;}
}

Map<String, TypeDescription> getFields():
{
    Token name;

    Map<String, TypeDescription> fields = new LinkedHashMap<String, TypeDescription>();
}
{
    name = <STRING_LITERAL>
    {
        fields.put(name.image, getTypeDescription());
    }
    [<COMMA> getFields()]//???????????????
    //(
        /*<COMMA> TypeName = <STRING_LITERAL>
        typeDescription = typeDefinition()

        {
          fields.put(TypeName.image, typeDescription);
          System.out.println("[Recursion] new struct populated < " + TypeName.image + ">");
        }*/
    //)*
    {return fields;}
}

TypeDescription getTypeDescription():
{
    Token type, length = null;

    TypeDescription typeDescription;
}
{
    type = <STRING_LITERAL>
    [<OPEN_BRACKET>length = <STRING_LITERAL><CLOSE_BRACKET>]
    {
        typeDescription = new TypeDescription(type.image);

        if (length != null)
            typeDescription.setLength(length.image);

        return typeDescription;
    }
}